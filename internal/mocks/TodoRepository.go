// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entity "github.com/ardafirdausr/todo-server/internal/entity"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *TodoRepository) Create(_a0 entity.CreateTodoParam) (*entity.Todo, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Todo
	if rf, ok := ret.Get(0).(func(entity.CreateTodoParam) *entity.Todo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.CreateTodoParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: _a0
func (_m *TodoRepository) DeleteById(_a0 primitive.ObjectID) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodoByID provides a mock function with given fields: _a0
func (_m *TodoRepository) GetTodoByID(_a0 primitive.ObjectID) (*entity.Todo, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Todo
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *entity.Todo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodosByUserID provides a mock function with given fields: _a0
func (_m *TodoRepository) GetTodosByUserID(_a0 primitive.ObjectID) ([]*entity.Todo, error) {
	ret := _m.Called(_a0)

	var r0 []*entity.Todo
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) []*entity.Todo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: _a0, _a1
func (_m *TodoRepository) UpdateById(_a0 primitive.ObjectID, _a1 entity.UpdateTodoParam) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, entity.UpdateTodoParam) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID, entity.UpdateTodoParam) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
